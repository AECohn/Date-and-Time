//Programmer Aviv Cohn

#CATEGORY "46" "Aviv's Modules" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#User_SimplSharp_Library "Schedule"

Digital_Input _Skip_,_Skip_, Save_Schedule, Recall_Schedule, Include_Weekends, Delay_Scheduled_Event;
Digital_Output _Skip_,_Skip_, Weekends_Included, Event_Elapsed, Show_Warning;
String_Input  Event_Input[128];
String_Output Event_Feedback;
integer lock;

Integer_Parameter Delay_Time_In_Minutes;
#Begin_Parameter_Properties Delay_Time_In_Minutes
propValidUnits = unitDecimal;
propBounds= 15d , 120d;
#End_Parameter_Properties


string_parameter  Filename[128];

Schedule_class mySchedule;

function Recall_Scheduled_Event()
  {
	Weekends_Included = mySchedule.Include_Weekends;
    Event_Feedback = mySchedule.Read_Schedule();
  }

Push Delay_Scheduled_Event
	{
        Event_Feedback = mySchedule.Delay_Schedule(Delay_Time_In_Minutes);
	}
	

Push Recall_Schedule
  {
    Recall_Scheduled_Event();
  }



Push Save_Schedule
  {
	    mySchedule.Include_Weekends = Include_Weekends;
      myschedule.Scheduled_Time = Event_Input;
    	Recall_Scheduled_Event();
  }
                        

 eventhandler Scheduled_Event_Callback(Schedule_class sender, EventArgs e)
  {
     if(lock = off)
  		{
      	Pulse(0, Event_Elapsed);
  			lock = on;
  			wait(6000) //wait 1 minute
  			{
                   lock = off;
  				}
  		}	
  }

eventhandler Warning_Callback (Schedule_class sender, EventArgs e)
  {
     if(lock = off)
  		{
      	Pulse(0, Show_Warning);
  			lock = on;
  			wait(6000) //wait 1 minute
  			{
                   lock = off;
  			}
  		}	
  }
function main()
  {
	mySchedule.filename = Filename;
     RegisterEvent(mySchedule, Update, Scheduled_Event_Callback);
	RegisterEvent(mySchedule, Warning, Warning_Callback);
    Recall_Scheduled_Event();
	mySchedule.Init();

  }
