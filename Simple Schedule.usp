//Programmer Aviv Cohn

#CATEGORY "46" "Aviv's Modules" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#User_SimplSharp_Library "Schedule"

Digital_Input _Skip_,_Skip_,_Skip_, Recall_Schedule, Include_Weekends, Delay_Scheduled_Event;
Digital_Output _Skip_,_Skip_, _Skip_, Weekends_Included, Event_Elapsed, Show_Warning, Event_Saved;
Analog_Output Timer_Output;
String_Input  Event_Input[128];
String_Output Event_Feedback, Date_Time;
integer schedule_lock, warning_lock;
String Temp_Date_Time[128];

Integer_Parameter Delay_Time_In_Minutes;
#Begin_Parameter_Properties Delay_Time_In_Minutes
propValidUnits = unitDecimal;
propBounds= 15d , 120d;
#End_Parameter_Properties

Integer_Parameter Warning_Time_In_Minutes;
#Begin_Parameter_Properties Warning_Time_In_Minutes
propValidUnits = unitDecimal;
propBounds= 1d , 60d;
#End_Parameter_Properties




string_parameter  Filename[128];

Schedule_class mySchedule;

function Recall_Scheduled_Event()
  {
    Event_Feedback = mySchedule.Read_Schedule(Filename);
  }

Push Delay_Scheduled_Event
	{
        Event_Feedback = mySchedule.Delay_Schedule(Delay_Time_In_Minutes);
	}
	

Push Recall_Schedule
  {
    Recall_Scheduled_Event();
  }



Change Event_Input
  {

	string Status[128];
	Status = myschedule.Scheduled_Time (Event_Input, Filename, Include_Weekends);
	Event_Feedback = Status;
       if(Find("Schedule set", Status ) > 0)
           {
			Pulse(100, Event_Saved);
		    Recall_Scheduled_Event();
			}

  }
                        

 eventhandler Scheduled_Event_Callback(Schedule_class sender, EventArgs e)
  {
     if(schedule_lock = off)
  		{
      	Pulse(0, Event_Elapsed);
  			schedule_lock = on;
  			wait(6000) //wait ten seconds
  			{
                   schedule_lock = off;
  				}
  		}	
  }

eventhandler Warning_Callback (Schedule_class sender, EventArgs e)
  {
     if(warning_lock = off)
  		{
      	Pulse(0, Show_Warning);
  			warning_lock = on;
  			wait(6000) //wait 60 seconds  			{
                   warning_lock = off;
  			
  		}	
  }

callback function Date_and_Time_Callback(integer Timer, string Date_and_Time)
{

	if(Temp_Date_Time <> Date_and_Time)
		{
            Temp_Date_Time = Date_and_Time;
			Date_Time = Temp_Date_Time;
		}

	if(Timer_Output <> Timer)
		{
		Timer_Output = Timer;
		}
}


function main()
  {
     RegisterEvent(mySchedule, Update, Scheduled_Event_Callback);
	RegisterEvent(mySchedule, Warning, Warning_Callback);
		RegisterDelegate(mySchedule, Transmit_DateTime, Date_and_Time_Callback); 

	Schedule_class.Warning_Time_Input = Warning_Time_In_Minutes; 
    Recall_Scheduled_Event();
	mySchedule.Init();
  }
